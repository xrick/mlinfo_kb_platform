// Business AI Assistant JavaScript

// Application data
const appData = {
  aiModels: [
    {
      id: "gpt4",
      name: "GPT-4",
      advantage: "ÂâµÊÑèÂØ´‰Ωú",
      description: "ÊúÄÈÅ©ÂêàÂâµÊÑèÂÖßÂÆπÁîüÊàê„ÄÅÊñáÊ°àÂØ´‰ΩúÂíåË§áÈõúÊé®ÁêÜ‰ªªÂãô",
      strengths: ["ÂâµÊÑèÂØ´‰Ωú", "ÈÇèËºØÊé®ÁêÜ", "Â§öË™ûË®ÄÊîØÊè¥"],
      weaknesses: ["ÊàêÊú¨ËºÉÈ´ò", "ÂõûÊáâÊôÇÈñìËºÉÈï∑"],
      icon: "‚úçÔ∏è"
    },
    {
      id: "claude",
      name: "Claude",
      advantage: "Êï∏ÊìöÂàÜÊûê",
      description: "Â∞àÁ≤æÊñºÊï∏ÊìöÂàÜÊûê„ÄÅÂúñË°®Ëß£ËÆÄÂíåÁµêÊßãÂåñË≥áÊñôËôïÁêÜ",
      strengths: ["Êï∏ÊìöÂàÜÊûê", "ÊñáÊ™îËôïÁêÜ", "ÂÆâÂÖ®ÊÄßÈ´ò"],
      weaknesses: ["ÂâµÊÑèËÉΩÂäõ‰∏ÄËà¨", "ÂúñÁâáËôïÁêÜÈôêÂà∂"],
      icon: "üìä"
    },
    {
      id: "gemini",
      name: "Gemini",
      advantage: "Âø´ÈÄüÂõûÊáâ",
      description: "Êèê‰æõÂø´ÈÄüÂõûÊáâÔºåÈÅ©ÂêàÂç≥ÊôÇÂ∞çË©±ÂíåÁ∞°ÂñÆ‰ªªÂãôËôïÁêÜ",
      strengths: ["ÂõûÊáâÈÄüÂ∫¶Âø´", "ÊàêÊú¨ÊïàÁõäÈ´ò", "Â§öÊ®°ÊÖãÊîØÊè¥"],
      weaknesses: ["Ë§áÈõúÊé®ÁêÜËÉΩÂäõÊúâÈôê", "Ê∫ñÁ¢∫ÊÄß‰∏ÄËà¨"],
      icon: "‚ö°"
    }
  ],
  salesFlow: [
    {
      id: 1,
      title: "ÂåØÂÖ•Ë≥áÊñô",
      description: "‰∏äÂÇ≥ÂÆ¢Êà∂Ë≥áÊñôÊàñÂåØÂÖ•ÁèæÊúâË≥áÊñôÂ∫´",
      icon: "üìÑ",
      details: "ÊîØÊè¥ CSV„ÄÅExcel„ÄÅJSON Á≠âÂ§öÁ®ÆÊ†ºÂºèÔºåËá™ÂãïË≠òÂà•Ë≥áÊñôÁµêÊßã"
    },
    {
      id: 2,
      title: "AI ÂàÜÊûê & ÂàÜÁæ§",
      description: "AI Ëá™ÂãïÂàÜÊûêÂÆ¢Êà∂ÁâπÂæµ‰∏¶ÈÄ≤Ë°åÂàÜÁæ§",
      icon: "‚ú®",
      details: "Âü∫ÊñºË≥ºË≤∑Ë°åÁÇ∫„ÄÅËààË∂£ÂÅèÂ•ΩÁ≠âÁ∂≠Â∫¶ÈÄ≤Ë°åÊô∫ÊÖßÂàÜÁæ§"
    },
    {
      id: 3,
      title: "Áî¢ÁîüÂàùÁâàÊñáÊ°à",
      description: "ÁÇ∫‰∏çÂêåÂÆ¢Êà∂Áæ§È´îÁîüÊàêÂÄãÊÄßÂåñÊñáÊ°à",
      icon: "‚úèÔ∏è",
      details: "Ê†πÊìöÂÆ¢Êà∂ÂàÜÁæ§ÁâπÂæµÔºåËá™ÂãïÁîüÊàêÈÅ©ÂêàÁöÑË°åÈä∑ÊñáÊ°à"
    },
    {
      id: 4,
      title: "ÂïüÂãïÂ∞çË©±",
      description: "ÈñãÂßãËàáÂÆ¢Êà∂ÈÄ≤Ë°åÂÄãÊÄßÂåñÂ∞çË©±",
      icon: "üí¨",
      details: "‰ΩøÁî® AI ÂçîÂä©ÈÄ≤Ë°åÂÆ¢Êà∂‰∫íÂãïÔºåÊèê‰æõÂç≥ÊôÇÂõûÊáâÂª∫Ë≠∞"
    },
    {
      id: 5,
      title: "ËøΩËπ§ÈÄ≤Â∫¶",
      description: "Áõ£ÊéßÂ∞çË©±ÈÄ≤Â∫¶ÂíåËΩâÊèõÁéá",
      icon: "üìà",
      details: "Âç≥ÊôÇËøΩËπ§ÂÆ¢Êà∂‰∫íÂãïÈÄ≤Â∫¶ÔºåÂàÜÊûêËΩâÊèõÊïàÊûú"
    }
  ],
  dataImportList: [
    {
      id: 1,
      name: "ÂÆ¢Êà∂Ë≥áÊñôÂ∫´_2024Q1.csv",
      date: "2024-01-15",
      status: "completed",
      type: "csv",
      records: 1250
    },
    {
      id: 2,
      name: "ÊΩõÂú®ÂÆ¢Êà∂_ÁßëÊäÄÊ•≠.xlsx",
      date: "2024-01-16",
      status: "processing",
      type: "excel",
      records: 850
    },
    {
      id: 3,
      name: "ÊúÉÂì°Ë≥áÊñô_È´òÂÉπÂÄºÂÆ¢Êà∂.json",
      date: "2024-01-17",
      status: "failed",
      type: "json",
      records: 320
    },
    {
      id: 4,
      name: "Èä∑ÂîÆÁ∑öÁ¥¢_ÈáëËûçÊ•≠.csv",
      date: "2024-01-18",
      status: "completed",
      type: "csv",
      records: 680
    }
  ],
  conversationStages: [
    {
      id: "initial",
      name: "ÂàùÊ≠•Êé•Ëß∏",
      description: "Âª∫Á´ãÁ¨¨‰∏ÄÊ¨°ËÅØÁπ´Ôºå‰∫ÜËß£ÂÆ¢Êà∂Âü∫Êú¨ÈúÄÊ±Ç"
    },
    {
      id: "exploration",
      name: "ÈúÄÊ±ÇÊé¢Á¥¢",
      description: "Ê∑±ÂÖ•‰∫ÜËß£ÂÆ¢Êà∂ÁóõÈªûÂíåÂÖ∑È´îÈúÄÊ±Ç"
    },
    {
      id: "presentation",
      name: "ÊñπÊ°àÂ±ïÁ§∫",
      description: "Êèê‰æõËß£Ê±∫ÊñπÊ°à‰∏¶Â±ïÁ§∫ÂÉπÂÄº"
    },
    {
      id: "closing",
      name: "Êàê‰∫§",
      description: "ÂÆåÊàê‰∫§Êòì‰∏¶Âª∫Á´ãÈï∑ÊúüÂêà‰ΩúÈóú‰øÇ"
    }
  ],
  smartSuggestions: [
    "Ë©¢ÂïèÂÆ¢Êà∂È†êÁÆóÁØÑÂúç",
    "ÁôºÈÄÅÁî¢ÂìÅÁõÆÈåÑ",
    "ÂÆâÊéíÁî¢ÂìÅÁ§∫ÁØÑ",
    "Êèê‰æõÂÆ¢Êà∂Ê°à‰æã",
    "ÈÇÄË´ãÂèÉÂä†Á∂≤Ë∑ØÁ†îË®éÊúÉ"
  ]
};

// Application state
let selectedModel = null;
let currentFlowStep = 1;
let currentConversationStage = 'initial';
let currentModelForSelection = null;

// Initialize application
document.addEventListener('DOMContentLoaded', function() {
  initializeApp();
  setupEventListeners();
  
  // Add initial welcome message
  setTimeout(() => {
    addChatMessage("Ê≠°Ëøé‰ΩøÁî®Ê•≠Âãô AI Âä©ÁêÜÔºÅË´ãÂÖàÈÅ∏Êìá‰∏ÄÂÄã AI Ê®°ÂûãÈñãÂßã‰ΩøÁî®„ÄÇ", 'ai');
  }, 500);
});

function initializeApp() {
  renderModelCards();
  renderTimeline();
  renderDataList();
  renderSmartSuggestions();
  updateFunnelStage();
}

function setupEventListeners() {
  // Use event delegation for all click events
  document.addEventListener('click', function(e) {
    e.preventDefault();
    
    // Handle info button clicks FIRST (highest priority)
    if (e.target.classList.contains('info-btn')) {
      e.stopPropagation();
      showFlowDetails(e.target);
      return;
    }
    
    // Handle import button
    if (e.target.closest('#importBtn')) {
      e.stopPropagation();
      openModal('uploadModal');
      return;
    }
    
    // Handle model card clicks
    const modelCard = e.target.closest('.model-card');
    if (modelCard) {
      e.stopPropagation();
      handleModelSelection(modelCard);
      return;
    }
    
    // Handle suggestion chips
    const suggestionChip = e.target.closest('.suggestion-chip');
    if (suggestionChip) {
      e.stopPropagation();
      const chatInput = document.getElementById('chatInput');
      chatInput.value = suggestionChip.textContent;
      sendMessage();
      return;
    }
    
    // Handle send button
    if (e.target.closest('#sendBtn')) {
      e.stopPropagation();
      sendMessage();
      return;
    }
    
    // Handle modal close buttons
    if (e.target.id === 'closeModal') {
      closeModal('modelModal');
      return;
    }
    
    if (e.target.id === 'cancelBtn') {
      closeModal('modelModal');
      return;
    }
    
    if (e.target.id === 'selectBtn') {
      selectCurrentModel();
      return;
    }
    
    if (e.target.id === 'closeFlowModal') {
      closeModal('flowModal');
      return;
    }
    
    if (e.target.id === 'flowOkBtn') {
      closeModal('flowModal');
      return;
    }
    
    if (e.target.id === 'closeUploadModal') {
      closeModal('uploadModal');
      return;
    }
    
    if (e.target.id === 'cancelUpload') {
      closeModal('uploadModal');
      return;
    }
    
    if (e.target.id === 'confirmUpload') {
      handleFileUpload();
      return;
    }
  });
  
  // Chat input keypress
  document.getElementById('chatInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      sendMessage();
    }
  });
  
  // Upload area setup
  const uploadArea = document.getElementById('uploadArea');
  const fileInput = document.getElementById('fileInput');
  
  uploadArea.addEventListener('click', function(e) {
    e.preventDefault();
    fileInput.click();
  });
  
  uploadArea.addEventListener('dragover', handleDragOver);
  uploadArea.addEventListener('drop', handleFileDrop);
  fileInput.addEventListener('change', handleFileSelect);
  
  // Close modals on overlay click
  document.querySelectorAll('.modal-overlay').forEach(modal => {
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeModal(modal.id);
      }
    });
  });
}

function renderModelCards() {
  const modelCards = document.getElementById('modelCards');
  modelCards.innerHTML = appData.aiModels.map(model => `
    <div class="model-card" data-model-id="${model.id}">
      <div class="model-icon">${model.icon}</div>
      <div class="model-name">${model.name}</div>
      <div class="model-advantage">${model.advantage}</div>
    </div>
  `).join('');
}

function renderTimeline() {
  const timeline = document.getElementById('timeline');
  timeline.innerHTML = appData.salesFlow.map((step, index) => `
    <div class="timeline-item ${index + 1 === currentFlowStep ? 'current' : ''}" data-step-id="${step.id}">
      <div class="timeline-icon">${step.icon}</div>
      <div class="timeline-content">
        <div class="timeline-title">${step.title}</div>
        <div class="timeline-description">${step.description}</div>
        <button class="info-btn" data-step-id="${step.id}" data-step-title="${step.title}" data-step-description="${step.description}" data-details="${step.details}">i</button>
      </div>
    </div>
  `).join('');
}

function renderDataList() {
  const dataList = document.getElementById('dataList');
  const statusLabels = {
    'completed': 'Â∑≤ÂÆåÊàê',
    'processing': 'ËôïÁêÜ‰∏≠',
    'failed': 'Â§±Êïó'
  };
  
  dataList.innerHTML = appData.dataImportList.map(item => `
    <div class="data-item">
      <div class="data-info">
        <div class="data-name">${item.name}</div>
        <div class="data-meta">${item.date} ‚Ä¢ ${item.records} Á≠ÜË®òÈåÑ</div>
      </div>
      <div class="data-status">
        <div class="status-dot ${item.status}"></div>
        <span>${statusLabels[item.status]}</span>
      </div>
    </div>
  `).join('');
}

function renderSmartSuggestions() {
  const smartSuggestions = document.getElementById('smartSuggestions');
  smartSuggestions.innerHTML = appData.smartSuggestions.map(suggestion => `
    <div class="suggestion-chip" data-suggestion="${suggestion}">${suggestion}</div>
  `).join('');
}

function handleModelSelection(modelCard) {
  const modelId = modelCard.dataset.modelId;
  const model = appData.aiModels.find(m => m.id === modelId);
  
  if (model) {
    showModelDetails(model);
  }
}

function showModelDetails(model) {
  const modalTitle = document.getElementById('modalTitle');
  const modalBody = document.getElementById('modalBody');
  
  modalTitle.textContent = model.name;
  currentModelForSelection = model;
  
  modalBody.innerHTML = `
    <div class="model-details">
      <div class="model-detail-section">
        <div class="detail-label">ÊèèËø∞</div>
        <p>${model.description}</p>
      </div>
      
      <div class="model-detail-section">
        <div class="detail-label">ÂÑ™Âã¢</div>
        <div class="detail-list">
          ${model.strengths.map(strength => `<div class="detail-item">${strength}</div>`).join('')}
        </div>
      </div>
      
      <div class="model-detail-section">
        <div class="detail-label">ÈôêÂà∂</div>
        <div class="detail-list">
          ${model.weaknesses.map(weakness => `<div class="detail-item">${weakness}</div>`).join('')}
        </div>
      </div>
    </div>
  `;
  
  openModal('modelModal');
}

function selectCurrentModel() {
  if (currentModelForSelection) {
    selectedModel = currentModelForSelection;
    
    // Update UI
    document.querySelectorAll('.model-card').forEach(card => {
      card.classList.remove('selected');
    });
    
    document.querySelector(`[data-model-id="${selectedModel.id}"]`).classList.add('selected');
    
    // Update header
    const modelIndicator = document.querySelector('.model-indicator');
    modelIndicator.textContent = `Â∑≤ÈÅ∏Êìá: ${selectedModel.name}`;
    modelIndicator.style.color = '#007AFF';
    
    closeModal('modelModal');
    
    // Add a chat message about model selection
    addChatMessage(`Â∑≤ÈÅ∏Êìá ${selectedModel.name} Ê®°ÂûãÔºåÂ∞àÁ≤æÊñº${selectedModel.advantage}„ÄÇÊàëÂ∞á‰ΩøÁî®Ê≠§Ê®°ÂûãÁÇ∫ÊÇ®Êèê‰æõÊúçÂãô„ÄÇ`, 'ai');
    
    currentModelForSelection = null;
  }
}

function showFlowDetails(infoBtn) {
  const stepTitle = infoBtn.dataset.stepTitle;
  const stepDescription = infoBtn.dataset.stepDescription;
  const details = infoBtn.dataset.details;
  
  document.getElementById('flowModalTitle').textContent = stepTitle;
  document.getElementById('flowModalBody').innerHTML = `
    <div class="model-details">
      <div class="model-detail-section">
        <div class="detail-label">Ë™™Êòé</div>
        <p>${stepDescription}</p>
      </div>
      <div class="model-detail-section">
        <div class="detail-label">Ë©≥Á¥∞Ë≥áË®ä</div>
        <p>${details}</p>
      </div>
    </div>
  `;
  
  openModal('flowModal');
}

function sendMessage() {
  const chatInput = document.getElementById('chatInput');
  const message = chatInput.value.trim();
  if (!message) return;
  
  console.log('Sending message:', message); // Debug log
  
  // Add user message
  addChatMessage(message, 'user');
  
  // Clear input
  chatInput.value = '';
  
  // Simulate AI response
  setTimeout(() => {
    const aiResponse = generateAIResponse(message);
    addChatMessage(aiResponse, 'ai');
    updateAINotes(message, aiResponse);
  }, 1000);
}

function addChatMessage(content, sender) {
  const chatMessages = document.getElementById('chatMessages');
  if (!chatMessages) {
    console.error('Chat messages container not found');
    return;
  }
  
  console.log('Adding message:', content, 'from', sender); // Debug log
  
  const messageDiv = document.createElement('div');
  messageDiv.className = `message ${sender}-message`;
  
  const now = new Date();
  const timeString = now.toLocaleTimeString('zh-TW', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });
  
  messageDiv.innerHTML = `
    <div class="message-content">${content}</div>
    <div class="message-time">${timeString}</div>
  `;
  
  chatMessages.appendChild(messageDiv);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

function generateAIResponse(userMessage) {
  const responses = [
    "Ë¨ùË¨ùÊÇ®ÁöÑÊèêÂïèÔºÅÂü∫ÊñºÊÇ®ÁöÑÈúÄÊ±ÇÔºåÊàëÂª∫Ë≠∞ÊàëÂÄëÂÖà‰∫ÜËß£ÊÇ®ÁöÑÁõÆÊ®ôÂÆ¢Êà∂Áæ§È´î„ÄÇ",
    "ÂæàÂ•ΩÁöÑÊÉ≥Ê≥ïÔºÅËÆìÊàëÁÇ∫ÊÇ®ÂàÜÊûê‰∏Ä‰∏ãÊúÄÈÅ©ÂêàÁöÑËß£Ê±∫ÊñπÊ°à„ÄÇ",
    "Êàë‰∫ÜËß£ÊÇ®ÁöÑÈúÄÊ±Ç„ÄÇÊ†πÊìöÊàëÁöÑÂàÜÊûêÔºåÂª∫Ë≠∞ÊàëÂÄëÂæûÊï∏ÊìöÂàÜÊûêÈñãÂßã„ÄÇ",
    "ÈÄôÊòØ‰∏ÄÂÄãÂæàÊ£íÁöÑÊ©üÊúÉÔºÅÊàëÂÄëÂèØ‰ª•Âà©Áî® AI ‰æÜÂÑ™ÂåñÊÇ®ÁöÑÊ•≠ÂãôÊµÅÁ®ã„ÄÇ",
    "Âü∫ÊñºÊÇ®Êèê‰æõÁöÑË≥áË®äÔºåÊàëÊé®Ëñ¶‰ª•‰∏ãÂπæÂÄãÊ≠•È©ü‰æÜÈÅîÊàêÊÇ®ÁöÑÁõÆÊ®ô„ÄÇ"
  ];
  
  return responses[Math.floor(Math.random() * responses.length)];
}

function updateAINotes(userMessage, aiResponse) {
  const notesContent = document.getElementById('notesContent');
  if (!notesContent) return;
  
  // Simulate updating AI notes based on conversation
  const notes = [
    { label: "Áï∂ÂâçÈöéÊÆµ", value: getStageLabel(currentConversationStage) },
    { label: "ÂÆ¢Êà∂ÈúÄÊ±Ç", value: "Ê≠£Âú®ÂàÜÊûê‰∏≠..." },
    { label: "‰∏ã‰∏ÄÊ≠•Ë°åÂãï", value: "Ê∑±ÂÖ•‰∫ÜËß£ÈúÄÊ±Ç" }
  ];
  
  notesContent.innerHTML = notes.map(note => `
    <div class="note-item">
      <span class="note-label">${note.label}Ôºö</span>
      <span class="note-value">${note.value}</span>
    </div>
  `).join('');
}

function updateFunnelStage() {
  document.querySelectorAll('.funnel-stage').forEach(stage => {
    stage.classList.remove('active');
  });
  
  const activeStage = document.querySelector(`[data-stage="${currentConversationStage}"]`);
  if (activeStage) {
    activeStage.classList.add('active');
  }
}

function getStageLabel(stageId) {
  const stage = appData.conversationStages.find(s => s.id === stageId);
  return stage ? stage.name : 'Êú™Áü•ÈöéÊÆµ';
}

function handleDragOver(e) {
  e.preventDefault();
  const uploadArea = e.target.closest('.upload-area');
  if (uploadArea) {
    uploadArea.style.borderColor = '#007AFF';
    uploadArea.style.background = 'rgba(0, 122, 255, 0.05)';
  }
}

function handleFileDrop(e) {
  e.preventDefault();
  const files = e.dataTransfer.files;
  if (files.length > 0) {
    processFile(files[0]);
  }
  resetUploadArea();
}

function handleFileSelect(e) {
  const files = e.target.files;
  if (files.length > 0) {
    processFile(files[0]);
  }
}

function handleFileUpload() {
  const fileInput = document.getElementById('fileInput');
  if (fileInput.files.length > 0) {
    processFile(fileInput.files[0]);
    closeModal('uploadModal');
  } else {
    alert('Ë´ãÂÖàÈÅ∏Êìá‰∏ÄÂÄãÊ™îÊ°à');
  }
}

function processFile(file) {
  console.log('Processing file:', file.name); // Debug log
  
  // Simulate file processing
  const newItem = {
    id: Date.now(),
    name: file.name,
    date: new Date().toISOString().split('T')[0],
    status: 'processing',
    type: file.name.split('.').pop().toLowerCase(),
    records: Math.floor(Math.random() * 1000) + 100
  };
  
  appData.dataImportList.unshift(newItem);
  renderDataList();
  
  // Add chat message about file upload
  addChatMessage(`Ê≠£Âú®ËôïÁêÜÊ™îÊ°à "${file.name}"...`, 'ai');
  
  // Simulate processing completion
  setTimeout(() => {
    newItem.status = 'completed';
    renderDataList();
    addChatMessage(`Ê™îÊ°à "${file.name}" Â∑≤ÊàêÂäüËôïÁêÜÂÆåÊàêÔºåÂÖ±ÂåØÂÖ• ${newItem.records} Á≠ÜË≥áÊñô„ÄÇ`, 'ai');
  }, 3000);
  
  resetUploadArea();
}

function resetUploadArea() {
  const uploadArea = document.getElementById('uploadArea');
  if (uploadArea) {
    uploadArea.style.borderColor = '';
    uploadArea.style.background = '';
  }
}

function openModal(modalId) {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
  }
}

function closeModal(modalId) {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.classList.remove('active');
    document.body.style.overflow = '';
  }
  
  // Reset file input if it's the upload modal
  if (modalId === 'uploadModal') {
    const fileInput = document.getElementById('fileInput');
    if (fileInput) {
      fileInput.value = '';
    }
  }
}